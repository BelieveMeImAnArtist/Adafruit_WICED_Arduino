import os
import os.path
import click
import textwrap

HEADER_TEMPLATE ="""\
/* Auto-generated by pyresource. Do not edit this file. */
const uint8_t {varname}_data[{len}] = {{
{data_hex}
}};

const HTTPResource {varname}({varname}_data, {len});
"""

RESOURCE_H_TEMPLATE = """\
#ifndef _{guard_name}_H_
#define _{guard_name}_H_

/* Auto-generated by pyresource. Do not edit this file. */

#include "http_common.h"
{includes}

#endif /* ifndef _{guard_name}_H_ */
"""

@click.command(short_help='Converts resource files into C headers for HTTP server.')
@click.argument('dirs', type=click.Path(True, False, True), nargs=-1, required=True)
def pyresource(dirs):
    """Adafruit Python HTTP Resource Tool

    This tool converts the folder contents into HTTP server resources in a C
    header format. These headers can then be imported into WICED Feather HTTP
    server sketches.

    Example of converting the contents of the current folder ('./'):

      $ python pyresource ./
    """
    includes = ''
    for d in dirs:
        for f in os.listdir(d):
            if (f != os.path.basename(__file__)) & (f != ".DS_Store"):
                varname = f.replace('.', '_')
                params = {}
                params['varname'] = varname
                with open(d + '/' + f, "rb") as fin:
                    data = fin.read()
                    data_hex = ', '.join(['0x{0:02X}'.format(ord(x)) for x in data])
                    # Set data to hex string (wrapped nicely on 80 character boundary).
                    data_hex = textwrap.fill(data_hex, width=80, break_long_words=False,
                                             break_on_hyphens=False, initial_indent='  ', subsequent_indent='  ')
                    params['len'] = len(data)
                    params['data_hex'] = data_hex
                with open(varname + '.h', "w") as fout:
                    fout.write(HEADER_TEMPLATE.format(**params))
                includes += '#include "' + varname + '.h"\n'
                # Debug output
                print("Converted '%s' to '%s'" % (f, varname + '.h'))

    with open('resources.h', "w") as fout:
        params = {}
        params['guard_name'] = 'RESOURCE'
        params['includes'] = includes
        fout.write(RESOURCE_H_TEMPLATE.format(**params))
        print("Wrote resource index to 'resources.h'")

if __name__ == '__main__':
    pyresource()
