import sys
import platform
import binascii
import os
from subprocess import check_output

if (len(sys.argv) < 2):
  print "Download certificate chain from a hostname"
  print ("Usage: python %s <hostname>")%(sys.argv[0])
  sys.exit()

hostname = sys.argv[1]

file_pem = hostname + '.crt'
file_der = hostname + '.der'

file_output = "certificates.h"
variable_name = "root_certs"

# Download certificates chain in PEM format from website
if platform.system() == 'Windows':
    # Windows store SSL certs in registry!!!
    print
    check_output(("echo '' | openssl s_client -connect %s:443 -showcerts | awk '/BEGIN CERT/ {p=1}; p; /END CERT/ {p=0}' > %s") % (hostname, file_pem), shell=True)
else:
    check_output(("echo '' | openssl s_client -connect %s:443 -showcerts -CApath /etc/ssl/certs | awk '/BEGIN CERT/ {p=1}; p; /END CERT/ {p=0}' > %s") % (hostname, file_pem), shell=True)

# Open certificate file and split cert chain into list
with open(file_pem, 'r') as f_pem_in:
    f_pem_contents = f_pem_in.read()
    print f_pem_contents
    cert_list =  ["-----BEGIN CERTIFICATE-----" + x for x in f_pem_contents.split("-----BEGIN CERTIFICATE-----")[1:]]

# Converting Certificate chain to C Data array
c_data = ""
count = 0

for cert in cert_list:
    # Write Cert string to temp file
    with open("tmp.pem", "w") as tmppem:
        tmppem.write(cert)
        tmppem.close()

    # Convert PEM to DER format
    check_output("openssl x509 -outform der -in tmp.pem -out tmp.der", shell=True)

    # Extra data to C Array
    with open("tmp.der", "rb") as tmpder:
        bytes_read = tmpder.read(16)
        while bytes_read != "" :
            c_data += ', '.join("0x{:02X}".format(ord(x)) for x in bytes_read)
            count += len(bytes_read)
            bytes_read = tmpder.read(16)
            if bytes_read != "" or cert != cert_list[-1]:
                c_data += ','
            c_data += '\n'

os.remove("tmp.pem")
os.remove("tmp.der")

# Write C DATA to header file
f_out = open(file_output, 'w')

f_out.write(
'#ifndef _CERTIFICATES_H_\n\
#define _CERTIFICATES_H_\n')

f_out.write(('\n/* This file is generated by following command \n        python %s %s\n*/\n\n') % (sys.argv[0], sys.argv[1]) )
f_out.write(
'#ifdef __cplusplus\n\
extern "C"\n\
{\n\
#endif\n\
\n')


f_out.write( ("const uint8_t %s[%d]={\n")%(variable_name, count) )
f_out.write(c_data)

f_out.write("};\n")
f_out.write(
"\n\
#ifdef __cplusplus\n\
} /* extern \"C\" */\n\
#endif\n\
\n\
#endif /* ifndef _CERTIFICATES_H_ */")
