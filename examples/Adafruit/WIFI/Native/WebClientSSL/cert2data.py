import sys
import platform
import binascii
import os
from subprocess import check_output

if (len(sys.argv) < 2):
  print "Covert one or more certificate files to C Array Data"
  print ("Usage: python %s <CERT_FILE> [,<CERT_FILE>]") % (sys.argv[0])
  sys.exit()

file_output = "certificates.h"
variable_name = "root_certs"

# Converting Certificate chain to C Data array
c_data = ""
count = 0

for cert_file in sys.argv[1:]:
    # Convert PEM to DER format
    check_output(("openssl x509 -outform der -in %s -out tmp.der")%(cert_file), shell=True)

    # Extra data to C Array
    with open("tmp.der", "rb") as tmpder:
        bytes_read = tmpder.read(16)
        while bytes_read != "" :
            c_data += ', '.join("0x{:02X}".format(ord(x)) for x in bytes_read)
            count += len(bytes_read)
            bytes_read = tmpder.read(16)
            if bytes_read != "" or cert_file != sys.argv[-1]:
                c_data += ','
            c_data += '\n'

os.remove("tmp.der")

# Write C DATA to header file
f_out = open(file_output, 'w')
f_out.write(
'#ifndef _CERTIFICATES_H_\n\
#define _CERTIFICATES_H_\n')

f_out.write(('\n/* This file is generated by following command \n        python %s %s\n*/\n\n') % (sys.argv[0], sys.argv[1]) )
f_out.write(
'#ifdef __cplusplus\n\
extern "C"\n\
{\n\
#endif\n\
\n')

f_out.write( ("const uint8_t %s[%d]={\n")%(variable_name, count) )
f_out.write(c_data)

f_out.write("};\n")
f_out.write(
"\n\
#ifdef __cplusplus\n\
} /* extern \"C\" */\n\
#endif\n\
\n\
#endif /* ifndef _CERTIFICATES_H_ */")
